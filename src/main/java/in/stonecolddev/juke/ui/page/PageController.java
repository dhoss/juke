package in.stonecolddev.juke.ui.page;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

@Controller
public class PageController {

  private final Logger log = LoggerFactory.getLogger(PageController.class);

  private final DefaultPageHandler pageHandler;

  public PageController(
      DefaultPageHandler pageHandler) {
    this.pageHandler = pageHandler;
  }

  // TODO: compileForView should populate sidebar with latest n page urls
  @GetMapping("/{pageSlug}.html")
  public ModelAndView findPage(@PathVariable("pageSlug") String pageSlug) {
    ModelAndView mv = new ModelAndView("pages/page");

    // TODO: figure out why exceptions aren't being handled
    mv.addAllObjects(pageHandler.compileForView(pageSlug));

    return mv;
  }

  @GetMapping("/admin/pages/new")
  public ModelAndView newPage() {
    ModelAndView mv = new ModelAndView("admin/pages/new");

    mv.addAllObjects(
        Map.of(
            "page", new CreateOrEditPageForm(),
            "action", "/admin/pages/create"
        )
    );

    return mv;
  }

  @GetMapping("/admin/pages/{slug}/edit")
  public ModelAndView editPage(@PathVariable("slug") String pageSlug) {
    ModelAndView mv = new ModelAndView("admin/pages/edit");
    // TODO: findPage should probably throw the PageNotFound exception and have it bubble up to the controller endpoint
    Page page = pageHandler.findPage(pageSlug)
        .orElseThrow(() -> new PageNotFoundException("Page not found with slug " + pageSlug));

    CreateOrEditPageForm pageForm = new CreateOrEditPageForm();
    pageForm.setTitle(page.title());
    pageForm.setBody(page.body());
    pageForm.setSlug(pageSlug);
    pageForm.setPublishedOn(
        LocalDateTime.parse(
            page.publishedOn()
                .toLocalDateTime()
                .format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm"))));

    mv.addAllObjects(
        Map.of(
            "page", pageForm,
            // TODO: since form actions can't really be generated by spring or thymeleaf, we will need a method to build them
            "action", "/admin/pages/" + pageSlug + "/edit/save"
        )
    );

    return mv;
  }

  @PostMapping("/admin/pages/{slug}/edit/save")
  public ModelAndView savePageEdits(
      @PathVariable("slug") String pageSlug,
      @ModelAttribute CreateOrEditPageForm pageFormData,
      RedirectAttributes redirectAttributes) {

    pageFormData.setSlug(pageSlug);
    pageHandler.save(pageFormData);

    redirectAttributes.addFlashAttribute("formSubmissionMessage", "Page saved");
    return new ModelAndView("redirect:/admin/pages/" + pageSlug + "/edit");
  }

  // TODO: Add test for creating a page
  // TODO: decide on whether or not the page creation URL should just be POST /new instead of /create
  // TODO: validate title before submission so existing slugs etc can't be sent in the request (see create() in DefaultPageHandler)
  @PostMapping("/admin/pages/create")
  public ModelAndView createPage(
      @ModelAttribute CreateOrEditPageForm pageFormData,
      RedirectAttributes redirectAttributes) {

    // TODO: validation/error handling
    pageHandler.create(pageFormData);
    redirectAttributes.addFlashAttribute("formSubmissionMessage", "Page created");

    // TODO: return ModelAndView in createPage
    return new ModelAndView("redirect:/admin/pages");
  }

  @GetMapping("/admin/pages")
  public ModelAndView listPages() {
    // TODO: pages listing needs to display dates nicely
    // TODO: pages listing should allow for sorting by dates
    // TODO: pages listing should allow pagination
    ModelAndView mv = new ModelAndView("admin/pages/list");

    mv.addObject("pages", pageHandler.listPages());

    return mv;
  }
}